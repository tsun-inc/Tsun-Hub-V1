local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera

-- CONFIG
local Settings = {
    AimbotEnabled = false,
    SilentAimEnabled = false,
    TeamCheck = true,
    AimPart = "Head",
    FOV = 150,
    ShowFOV = true,
    FOVColor = Color3.fromRGB(0, 0, 255)
}

-- FOV Circle Drawing
local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = Settings.ShowFOV
FOVCircle.Radius = Settings.FOV
FOVCircle.Thickness = 2
FOVCircle.Transparency = 1
FOVCircle.Color = Settings.FOVColor
FOVCircle.Filled = false

-- Update FOV Circle
RunService.RenderStepped:Connect(function()
    FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    FOVCircle.Visible = Settings.ShowFOV and Settings.AimbotEnabled
    FOVCircle.Radius = Settings.FOV
    FOVCircle.Color = Settings.FOVColor
end)

-- Helper: Check if on same team
local function IsEnemy(player)
	if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return false end
	if Settings.TeamCheck and player.Team == LocalPlayer.Team then return false end
	return true
end

-- Helper: Get Closest Player to Mouse within FOV
local function GetClosestPlayer()
	local closestPlayer = nil
	local shortestDistance = Settings.FOV

	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and IsEnemy(player) then
			local character = player.Character
			if character and character:FindFirstChild(Settings.AimPart) then
				local partPos = Camera:WorldToViewportPoint(character[Settings.AimPart].Position)
				local distance = (Vector2.new(partPos.X, partPos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude

				if partPos.Z > 0 and distance < shortestDistance then
					closestPlayer = character[Settings.AimPart]
					shortestDistance = distance
				end
			end
		end
	end

	return closestPlayer
end

-- Aimbot Logic
RunService.RenderStepped:Connect(function()
	if Settings.AimbotEnabled and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
		local target = GetClosestPlayer()
		if target then
			Camera.CFrame = CFrame.new(Camera.CFrame.Position, target.Position)
		end
	end
end)

-- Silent Aim Hook
local __namecall
__namecall = hookmetamethod(game, "__namecall", function(self, ...)
	local method = getnamecallmethod()
	local args = {...}

	if Settings.SilentAimEnabled and tostring(self) == "Hit" and method == "FireServer" then
		local target = GetClosestPlayer()
		if target then
			args[1] = target.Position
			return __namecall(self, unpack(args))
		end
	end

	return __namecall(self, ...)
end)

-- Combat Section UI Elements
local combatTab = CreateTab("Combat")

-- Silent Aim Toggle
CreateToggle(combatTab, "Silent Aim", Settings.SilentAimEnabled, function(val)
	Settings.SilentAimEnabled = val
end)

-- Aimbot Toggle
CreateToggle(combatTab, "Aimbot", Settings.AimbotEnabled, function(val)
	Settings.AimbotEnabled = val
end)

-- FOV Circle Toggle
CreateToggle(combatTab, "Show FOV", Settings.ShowFOV, function(val)
	Settings.ShowFOV = val
	FOVCircle.Visible = val
end)

-- FOV Size Slider
CreateSlider(combatTab, "FOV Size", 20, 500, Settings.FOV, function(val)
	Settings.FOV = val
	FOVCircle.Radius = val
end)

-- FOV Color Picker
CreateColorPicker(combatTab, "FOV Color", Settings.FOVColor, function(col)
	Settings.FOVColor = col
	FOVCircle.Color = col
end)

-- Team Check Info Label (Passive)
local teamCheckInfo = Instance.new("TextLabel")
teamCheckInfo.Text = "Team Check: Enabled"
teamCheckInfo.TextColor3 = Color3.fromRGB(0, 200, 255)
teamCheckInfo.Font = Enum.Font.SourceSansBold
teamCheckInfo.TextSize = 14
teamCheckInfo.BackgroundTransparency = 1
teamCheckInfo.Size = UDim2.new(1, 0, 0, 20)
teamCheckInfo.Parent = combatTab

-- Visuals Section UI Elements
local visualsTab = CreateTab("Visuals")

-- ESP SETTINGS
CreateToggle(visualsTab, "Enable ESP", Settings.ESPEnabled, function(val)
	Settings.ESPEnabled = val
end)

CreateToggle(visualsTab, "ESP Team Check", Settings.ESPTeamCheck, function(val)
	Settings.ESPTeamCheck = val
end)

CreateColorPicker(visualsTab, "ESP Color", Settings.ESPColor, function(val)
	Settings.ESPColor = val
end)

CreateSlider(visualsTab, "ESP Render Distance", 100, 2000, Settings.ESPDistance, function(val)
	Settings.ESPDistance = val
end)

-- BOXES SETTINGS
CreateToggle(visualsTab, "Boxes", Settings.ESPBoxes, function(val)
	Settings.ESPBoxes = val
end)

CreateColorPicker(visualsTab, "Box Color", Settings.BoxColor, function(val)
	Settings.BoxColor = val
end)

CreateToggle(visualsTab, "Box Outline", Settings.BoxOutline, function(val)
	Settings.BoxOutline = val
end)

CreateColorPicker(visualsTab, "Outline Color", Settings.BoxOutlineColor, function(val)
	Settings.BoxOutlineColor = val
end)

-- NAMES SETTINGS
CreateToggle(visualsTab, "Names", Settings.ESPNames, function(val)
	Settings.ESPNames = val
end)

CreateColorPicker(visualsTab, "Name Color", Settings.NameColor, function(val)
	Settings.NameColor = val
end)

CreateToggle(visualsTab, "Name Outline", Settings.NameOutline, function(val)
	Settings.NameOutline = val
end)

CreateColorPicker(visualsTab, "Name Outline Color", Settings.NameOutlineColor, function(val)
	Settings.NameOutlineColor = val
end)

-- HEALTH SETTINGS
CreateToggle(visualsTab, "Health", Settings.ESPHealth, function(val)
	Settings.ESPHealth = val
end)

CreateColorPicker(visualsTab, "Health Color", Settings.HealthColor, function(val)
	Settings.HealthColor = val
end)

CreateToggle(visualsTab, "Health Outline", Settings.HealthOutline, function(val)
	Settings.HealthOutline = val
end)

CreateColorPicker(visualsTab, "Health Outline Color", Settings.HealthOutlineColor, function(val)
	Settings.HealthOutlineColor = val
end)

-- Player Section UI Elements
local playerTab = CreateTab("Player")

-- Fly
CreateToggle(playerTab, "Enable Fly", Settings.FlyEnabled, function(val)
	Settings.FlyEnabled = val
end)

CreateSlider(playerTab, "Fly Speed", 1, 200, Settings.FlySpeed, function(val)
	Settings.FlySpeed = val
end)

-- WalkSpeed
CreateToggle(playerTab, "Enable WalkSpeed", Settings.WalkSpeedEnabled, function(val)
	Settings.WalkSpeedEnabled = val
end)

CreateSlider(playerTab, "Set WalkSpeed", 16, 200, Settings.WalkSpeed, function(val)
	Settings.WalkSpeed = val
end)

-- Infinite Jump
CreateToggle(playerTab, "Infinite Jump", Settings.InfiniteJump, function(val)
	Settings.InfiniteJump = val
end)

-- Functional Scripts
game:GetService("RunService").RenderStepped:Connect(function()
	local char = game.Players.LocalPlayer.Character
	if char and Settings.FlyEnabled then
		if not char:FindFirstChild("BodyVelocity") then
			local bv = Instance.new("BodyVelocity", char:WaitForChild("HumanoidRootPart"))
			bv.Name = "BodyVelocity"
			bv.Velocity = Vector3.new(0,0,0)
			bv.MaxForce = Vector3.new(100000,100000,100000)
		end
		local vel = Vector3.zero
		if UserInputService:IsKeyDown(Enum.KeyCode.W) then vel = vel + workspace.CurrentCamera.CFrame.LookVector end
		if UserInputService:IsKeyDown(Enum.KeyCode.S) then vel = vel - workspace.CurrentCamera.CFrame.LookVector end
		if UserInputService:IsKeyDown(Enum.KeyCode.A) then vel = vel - workspace.CurrentCamera.CFrame.RightVector end
		if UserInputService:IsKeyDown(Enum.KeyCode.D) then vel = vel + workspace.CurrentCamera.CFrame.RightVector end
		char.HumanoidRootPart.BodyVelocity.Velocity = vel.Unit * Settings.FlySpeed
	elseif char and char:FindFirstChild("BodyVelocity") then
		char.HumanoidRootPart.BodyVelocity:Destroy()
	end

	if Settings.WalkSpeedEnabled then
		char:FindFirstChildOfClass("Humanoid").WalkSpeed = Settings.WalkSpeed
	end
end)

-- Infinite Jump Script
UserInputService.JumpRequest:Connect(function()
	if Settings.InfiniteJump then
		local char = game.Players.LocalPlayer.Character
		if char and char:FindFirstChildOfClass("Humanoid") then
			char:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
		end
	end
end)

-- World Section UI Elements
local worldTab = CreateTab("World")

-- Set Skybox
local skyboxes = {
	["Sunset"] = {
		SkyboxBk = "rbxassetid://7018684000",
		SkyboxDn = "rbxassetid://7018684000",
		SkyboxFt = "rbxassetid://7018684000",
		SkyboxLf = "rbxassetid://7018684000",
		SkyboxRt = "rbxassetid://7018684000",
		SkyboxUp = "rbxassetid://7018684000",
	},
	["Space"] = {
		SkyboxBk = "rbxassetid://15362867504",
		SkyboxDn = "rbxassetid://15362867504",
		SkyboxFt = "rbxassetid://15362867504",
		SkyboxLf = "rbxassetid://15362867504",
		SkyboxRt = "rbxassetid://15362867504",
		SkyboxUp = "rbxassetid://15362867504",
	},
	["Blue Nebula"] = {
		SkyboxBk = "rbxassetid://1594542861",
		SkyboxDn = "rbxassetid://1594542861",
		SkyboxFt = "rbxassetid://1594542861",
		SkyboxLf = "rbxassetid://1594542861",
		SkyboxRt = "rbxassetid://1594542861",
		SkyboxUp = "rbxassetid://1594542861",
	},
}

local skyboxNames = {}
for k in pairs(skyboxes) do
	table.insert(skyboxNames, k)
end

CreateDropdown(worldTab, "Set Skybox", skyboxNames, "Sunset", function(selected)
	local sky = Instance.new("Sky", game.Lighting)
	local data = skyboxes[selected]
	for prop, id in pairs(data) do
		sky[prop] = id
	end
end)

-- Final instructions
print("[+] Arsenal GUI loaded successfully with Combat, Visuals, Player, Teleport, World, and Misc tabs.")
